# The alert on failure command has been commented out from all jobs, until the contexts described below have the environment variables
# setup.
version: 2.1

parameters:
  workingdir:
    type: string
    default: "~/frontend"

  node-image-tag:
    type: string
    default: "14"

  docker-version:
    type: string
    default: 19.03.13

executors:
  docker-executor:
    docker:
      - image: docker:17.05.0-ce-git
    working_directory: << pipeline.parameters.workingdir >>

  node-executor:
    docker:
      - image: circleci/node:<< pipeline.parameters.node-image-tag >>
    working_directory: << pipeline.parameters.workingdir >>
  
  smoke-executor:
    docker:
      - image: python:3.9.0-alpine
    working_directory: << pipeline.parameters.workingdir >>

orbs:
  slack: circleci/slack@4.3.0
  # Ref: https://circleci.com/developer/orbs/orb/codecov/codecov
  codecov: codecov/codecov@1.2.3

commands:

  build_docker_image:
    description: Build Docker Image
    parameters:
      image:
        description: Docker Image name
        type: string

    steps:
      - setup_remote_docker:
          version: 19.03.13

      - attach_workspace:
          at: .

      - run:
          name: Install missing dependencies
          command: apk add --update curl jq

      - run:
          name: Build application Docker image
          command: |
            docker build -t << parameters.image >>:$(echo $CIRCLE_SHA1 | cut -c1-7) .

      - run:
          name: Save application Docker image
          command: |
            docker save -o << parameters.image >>-image.tar << parameters.image >>:$(echo $CIRCLE_SHA1 | cut -c1-7)

      - store_artifacts:
          path: ./<< parameters.image >>-image.tar
          destination: << parameters.image >>-image.tar

      - persist_to_workspace:
          root: .
          paths: 
            - .

  push_docker_image:
    description: Push Docker image to registry
    parameters:
      tag:
        type: string
        description: Docker tag
        default: latest
      image:
        description: Docker image name
        type: string
      registry:
        description: Docker registry name
        type: string

    steps:
      - setup_remote_docker
      - attach_workspace:
          at: .

      - run:
          name: Install missing dependencies
          command: apk add --update curl jq

      - run:
          name: Load application Docker image
          command: docker load --input << parameters.image >>-image.tar

      - run:
          name: Tag docker image
          command: |
            docker tag << parameters.image >>:$(echo $CIRCLE_SHA1 | cut -c1-7) << parameters.registry >>/<< parameters.image >>:<< parameters.tag >>
            docker tag << parameters.image >>:$(echo $CIRCLE_SHA1 | cut -c1-7) << parameters.registry >>/<< parameters.image >>:<< parameters.tag >>-$(echo $CIRCLE_SHA1 | cut -c1-7)

      - run:
          name: Push application Docker image
          command: |
            docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
            docker push << parameters.registry >>/<< parameters.image >>:<< parameters.tag >>-$(echo $CIRCLE_SHA1 | cut -c1-7)
            docker push << parameters.registry >>/<< parameters.image >>:<< parameters.tag >>

  alert_on_failure:
    description: Notifies channel on failure
    parameters:
      channel:
        description: Slack channel to send slack notification
        type: string
        default: $SLACK_DEFAULT_CHANNEL
    steps:
      - slack/notify:
          channel: $SLACK_DEFAULT_CHANNEL
          event: fail
          template: basic_fail_1

  alert_on_success:
    description: Notifies channel on success
    parameters:
      channel:
        description: Slack channel to send slack notification
        type: string
        default: $SLACK_DEFAULT_CHANNEL
    steps:
      -   slack/notify:
            channel: $SLACK_DEFAULT_CHANNEL
            event: pass
            template: basic_success_1

jobs:
  setup:
    executor: node-executor
    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - dependencies-{{ checksum "yarn.lock" }}-{{ .Branch }}
            # fallback to using the latest cache if no exact match is found
            - dependencies-{{ checksum "yarn.lock" }}-
            - depdnencies-

      - run:
          name: Install Frontend dependencies
          command: make install

      - run:
          name: Install Project tooling
          command: make setup-trivy

      - save_cache:
          key: dependencies-{{ checksum "yarn.lock" }}-{{ .Branch }}
          paths:
            - node_modules

      - persist_to_workspace:
          root: .
          paths: 
            - .

      - alert_on_failure

      - alert_on_success

  lint:
    executor: node-executor
    steps:
      - attach_workspace:
          at:
            .

      - restore_cache:
          keys:
            - dependencies-{{ checksum "yarn.lock" }}-{{ .Branch }}g
            - dependencies-

      - run:
          name: Install Hadolint
          command: make setup-hadolint

      - run:
          name: Lint Dockerfile
          command: make lint-docker

      - run:
          name: Lint Application
          command: make lint

      - alert_on_failure

      - alert_on_success

  test:
    executor: node-executor
    steps:
      - attach_workspace:
          at:
            .

      - restore_cache:
          keys:
            - dependencies-{{ checksum "yarn.lock" }}-{{ .Branch }}
            - dependencies-

      - run:
          # This avoids failure for code coverage
          name: Run Unit tests
          command: make test-cover || true

      - store_test_results:
          path: coverage
      
      - codecov/upload:
          token: $CODECOV_TOKEN
      
      - alert_on_failure

      - alert_on_success
  
  security-scan:
    executor: node-executor
    steps:
      - attach_workspace:
          at: .
      
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "yarn.lock" }}-{{ .Branch }}
            - v1-dependencies-

      - run:
          name: Scan Frontend
          # Failing as it's also scanning devDependencies which will not be bundled
          # in production build.
          # this will be allowed to fail currently as it's not a critical step
          command: make scan-frontend || true

      - alert_on_failure

      - alert_on_success
    
  license-scan:
    executor: node-executor
    steps:
      - attach_workspace:
          at: .
      
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "yarn.lock" }}-{{ .Branch }}
            - v1-dependencies-

      - run:
          name: Scan Licenses
          command: yarn scan:licenses --failOn 'GPL License'

      - alert_on_failure

      - alert_on_success
  
  build:
    executor: node-executor
    steps:
      - attach_workspace:
          at: .
      
      - restore_cache:
          keys:
            - dependencies-{{ checksum "yarn.lock" }}-{{ .Branch }}
            - dependencies-

      - run:
          name: Run Build
          command: |
            make setup-env
            make build

      - store_artifacts:
          path: build
          destination: build

      - persist_to_workspace:
          root: .
          paths: 
            - .

      - alert_on_failure

      - alert_on_success

  build_docker_image:
    executor: docker-executor
    steps:
      - build_docker_image:
          image: portfolio-frontend

      # Docker Image Scan is failing as it's not a critical step, this can be left out      
      # - run:
      #     name: Scan Docker Image
      #     command: |
      #       export TAG=$($CIRCLE_SHA1 | cut -c1-7)
      #       ./bin/trivy $DOCKER_USERNAME/frontend:${TAG}

      # alerts are failing to be sent for some reason
      # - alert_on_failure

      # - alert_on_success

  push_latest:
    executor: docker-executor
    steps:
      - push_docker_image:
          tag: latest
          image: porfolio
          registry: $DOCKER_USERNAME

      - alert_on_failure

      - alert_on_success

  publish_release:
    executor: node-executor
    steps:
      - attach_workspace:
          at: .

      - run:
          name: Publish release
          command: npx semantic-release

      - alert_on_failure
      
      - alert_on_success

# Note that there are contexts that have been configured that will contain environment variables that will be needed by some jobs
# Examples in this case are:
# slack-context: This should have the SLACK_ACCESS_TOKEN & SLACK_DEFAULT_CHANNEL environment variables
#  SLACK_ACCESS_TOKEN will have the access token as configured from Slack
#  SLACK_DEFAULT_CHANNEL will have the slack default channel, where you would like messages to be sent from the CI
# docker-context: This should contain Docker Registry credentials in the environment variables DOCKER_USERNAME, DOCKER_PASSWORD
# github-context: This should contain a GITHUB_TOKEN environment variable that can be used to read/write to the repository. 
#  Ensure that this token has limited scope & it should only read/write to repository to create Tags/Releases
# uncomment the context blocks to use these environment variables. But note, ensure that these contexts already exist in CircleCI
workflows:
  version: 2
  test_build_push_tag:
    jobs:
      - setup:
          context: slack-context

      - lint:
          context: slack-context
          requires:
            - setup
      
      - test:
          context: slack-context
          requires:
            - lint
      
      - security-scan:
          context: slack-context
          requires:
            - test

      - license-scan:
          context: slack-context
          requires:
            - test

      - build:
          context: slack-context
          requires:
            - license-scan

      - build_docker_image:
          context: 
            - docker-context
            - slack-context
          filters:
            branches:
              only:
                - develop
                - main
          requires:
            - build

      - push_latest:
          context: 
            - docker-context
            - slack-context
          filters:
            branches:
              only:
                - develop
                - main
          requires:
            - build_docker_image

      - publish_release:
          context: 
            - github-context
            - slack-context
          filters:
            branches:
              only:
                - main
